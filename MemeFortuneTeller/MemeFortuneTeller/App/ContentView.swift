//
//  ContentView.swift
//  MemeFortuneTeller
//
//  Created by Aleksandr Meshchenko on 14.07.25.
//

import SwiftUI

struct ContentView: View {
    @State private var viewModel = MainViewModel()
    @FocusState private var isTextFieldFocused: Bool
    
    var body: some View {
        ZStack {
            VStack(spacing: 20) {
                
                // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
                TextField("–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", text: $viewModel.userQuestion)
                    .textFieldStyle(SearchTextFieldStyle(text: $viewModel.userQuestion))
                    .padding(.horizontal)
                    .focused($isTextFieldFocused)
                    .disabled(viewModel.isLoading)  // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                Button("–ü–û–õ–£–ß–ò–¢–¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï") {
                    isTextFieldFocused = false  // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    viewModel.getPrediction()
                }
                .buttonStyle(PurpleButtonStyle())
                .disabled(viewModel.isLoading)
                
                // –û–±–ª–∞—Å—Ç—å –¥–ª—è –º–µ–º–∞
                memeSection
                
                Spacer()
            }
            .padding()
            .onTapGesture {
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Ç–∞–ø–µ –≤ –ø—É—Å—Ç—É—é –æ–±–ª–∞—Å—Ç—å
                isTextFieldFocused = false
            }
            .onAppear {
                isTextFieldFocused = true
            }
            .onChange(of: viewModel.shouldFocusTextField) { _, newValue in
                if newValue {
                    isTextFieldFocused = true
                    viewModel.shouldFocusTextField = false
                }
            }
            
            // Toast overlay - –∏—Å–ø–æ–ª—å–∑—É–µ–º toastManager –∏–∑ viewModel
            ToastView(message: viewModel.toastManager.message,
                      isShowing: $viewModel.toastManager.isShowing)
        }
    }
    
    @ViewBuilder
    private var memeSection: some View {
        if viewModel.isLoading {
            ProgressView("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
                .frame(height: 300)
        } else if viewModel.showMeme, let meme = viewModel.currentMeme {
            VStack(spacing: 16) {
                
                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–º–∞ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                ZStack {
                    AsyncImage(url: URL(string: meme.url)) { image in
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                    } placeholder: {
                        Rectangle()
                            .fill(.gray.opacity(0.3))
                            .overlay(ProgressView())
                    }
                    .frame(maxHeight: 300)
                    .background(.clear, in: RoundedRectangle(cornerRadius: 12))
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                    
                    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–æ–≤–µ—Ä—Ö
                    if viewModel.reactionManager.isShowing {
                        ReactionView(
                            emoji: viewModel.reactionManager.emoji,
                            isShowing: viewModel.reactionManager.isShowing
                        )
                    }
                }
                
                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                HStack {
                    Button("üëé") {
                        viewModel.rejectPrediction()
                    }
                    .buttonStyle(RejectButtonStyle())
                    .disabled(viewModel.reactionManager.isShowing) // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                    
                    Button("üëç") {
                        viewModel.acceptPrediction()
                    }
                    .buttonStyle(AcceptButtonStyle())
                    .disabled(viewModel.reactionManager.isShowing) // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                }
                .padding(.horizontal)
            }
        }
    }
}

#Preview {
    ContentView()
}
